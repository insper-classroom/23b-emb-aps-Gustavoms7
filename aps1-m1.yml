issues:
  issue0:
    Title: 1 - Pino Buzzer
    Body: |
      Definir e configurar pino que será usado para conectar o buzzer.

      - [ ] Atualizar `README.md` com definição do pino.
      - [ ] Inserir `#defines` no  `main.c` com valores certos
      ```c
      #define BUZZER_PIO
      #define BUZZER_PIO_ID
      #define BUZZER_PIO_IDX
      #define BUZZER_PIO_IDX_MASK
      ```
      - [ ] Atualizar função  `init()` configurando o pino do buzzer como output

      Dicas (opcional):

      - [ ] Criar função `void set_buzzer();` que coloca 1 no pino do buzzer
      - [ ] Criar função `void clear_buzzer();` que coloca 0 no pino do buzzer

  issue1:
    Title: 2 - Pino botão start/pause
    Body: |
      Definir e configurar pino que será usado para conectar o botão de start/pause.

      - [ ] Atualizar `README.md` com definição do pino.
      - [ ] Inserir `#defines` no  `main.c` com valores certos

      ```c
      #define START_PIO
      #define START_PIO_ID
      #define START_PIO_IDX
      #define START_PIO_IDX_MASK
      ```
      - [x] Atualizar função  `init()` configurando o pino do botão como input

      Dicas (opcional):

      - [ ] Criar função `int get_startstop();` que retorna o status do botão (1/0)

  issue2:
    Title: 3 - Pino seleção musica
    Body: |
      Definir e configurar pino que será usado para conectar o botão de seleção musical.

      - [ ] Atualizar `README.md` com definição do pino.
      - [ ] Inserir `#defines` no  `main.c` com valores certos

      ```c
      #define SELECAO_PIO
      #define SELECAO_PIO_ID
      #define SELECAO_PIO_IDX
      #define SELECAO_PIO_IDX_MASK
      ```

      - [ ] Atualizar função  `init()` configurando o pino do botão como input

      Dicas (opcional):

      - [ ] Criar função `int get_selecao();` que retorna o status do botão (1/0)

  issue3:
    Title: 4 - buzzer_test(int freq)
    Body: |
      Crie uma função (buzzer_test(int freq)) que gera no pino do
      buzzer uma onda quadrada de frequência definida, para isso você
      deve usar:

      - `pio_set()`
      - `pio_clear()`
      - `delay_ns()` / `delay_ms`

      :warning: Lembre que a frequência é definido em Hz.

      - [ ] Implementar funcão
      - [ ] Link para um vídeo da função funcionando

  issue4:
    Title: 5 - Função tone
    Body: |
      Criar função `tone` que gera um tom no pino do buzzer. Para
      mais informações acesse:

      - https://insper.github.io/ComputacaoEmbarcada/APS-1-Musical-software/#tone

      Para validar execute algumas notas por tempos diferentes.

      ```c
      for (int freq=200; freq<5000; freq+=500){
        tone(freq, 200 + freq/2);
        delay_ms(200);
      }
      ```

  issue5:
    Title: 6 - Pino Buzzer
    Body: |
      Incorporar no código `#define` das notas
      e também vetor `melody` que define a música (tom e tempo).

      **Entenda o código exemplo antes de seguir em frente.**

      Usar como base a música do super Mario Bros:

      - https://github.com/robsoncouto/arduino-songs/blob/3b8ed10f644cb150bc3fe39c854546f5b9331f71/supermariobros/supermariobros.ino#L9

      - Variáveis: `tempo`, `notes`, `wholenote`, `divider`, `noteDuration`

  issue6:
    Title: 7 - Pino Buzzer
    Body: |
      Incorporar `for` que varre a música e chama a função tone.

      **Entenda o código exemplo antes de seguir em frente.**

      - https://github.com/robsoncouto/arduino-songs/blob/3b8ed10f644cb150bc3fe39c854546f5b9331f71/supermariobros/supermariobros.ino#L213

      Se tudo tiver certo quando executar o código vocês devem escutar a música do Mario.

      Dicas:

      - **Antes de tudo, entenda o código!!!**
      - A função `tone` que criamos é diferente da função `tone` do exemplo
      - A função `delay` é diferente
      - Remover a chamada de função `noTone` (diferente do arduino nós não precisamos dela)
